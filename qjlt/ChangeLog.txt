2019.09.19      7.3.19.0919
### Added
 - The program now tracks the total learning time of each KU and a cap of 300 seconds is set to avoid long idle period in case that users are running the program but are not actually learning.
 - implemented a (primitive) touch support for linux version (by implementing both click and press slots).
 - If a database write operation is failed because the db file is locked by another program, QJLT can now allow users to select between retry and skip (instead of skipping the KU directly).
 - A brand new "Boss Mode" is added. Under boss mode, the program will do nothing apart from showing an icon on tray. To disable the boss mode, a (current hard-coded) password is needed.
### Fixed
 - Fatal errors caused by database operation failure can now be handled gracefully instead of simply crashing the whole program.
 - Upgraded the major qt version to 5.12.3. Some new syntax and function updates from Qt are implemented
### Changed
 - Shrink the font size from 18pt to 13 pt on Android platform to accommodate more content in one screen.
 - Database's naming convention is updated and the program is changed accordingly.
 - [DBUtility] Database's naming convention is updated and the program is changed accordingly.

2019.03.28      7.2.19.0328
### Added
 - The Windows version has been moved to 64bit
 - The Windows version now uses Microsoft Yahei as its default font with (relatively) good Chinese support
 - Supports linespace adjustment
 - Adds skip button to main interface (as it could be useful by Android platform)
 - The Android version can now customize client name
### Fixed
 - Statistics on Android platform is using monospace font now
### Changed
 - The adaptive textedit is implemented in a better way.
 - The exit mechanism (on Windows, Linux and Android) is implemented in a better way.
 - The Subtype is now formally abandoned and Maintype field is renamed to Category.
 - The adaptive display of metainfo is generated by a much better machanism.

2018.08.16      7.1.18.0816
### Added
 - DB-Utility can search by ID (as well as Question and Answer)

### Fixed
 - Long content would make the window longer than the height of the screen
 - Some texts are not in the correct font on Windows platform
 - The final comparison page is now shorter (to avoid being higher than the screen)
 - Tray icon will not be hidden automatically

### Changed
 - The length of the snapshot box is largely shortened in order to fit small screens
 - [DBUtility] will only load the first 100 hits if there are too many search results.

2017.10.01      7.0.17.1001
### Added
 - Rewrite the program in Qt: now the new QJLT can run on both Windows and Linux platforms (and it should be able to run on Mac OS as well...)
 - Simplify the program's structure drastically -- a lot of functions are now performed by SQL statements instead of being implemented them one by one
 - Use the default SQLite library of Qt instead of the official one -- no dependency problem anymore!
 - Many rarely used functions are removed
 - Make some modifications to the program to make it work on Android as well (although not very perfectly)

### Fixed
 - The problem that the hide() method sometimes doesn't work (the reason is the method of "adaptInput()" which can call an equivalent to show() method)

2017.04.04	6.10.17.0404
### Added
 - A very brilliant "Working Mode" is added.
 - Now user can select if the main learning window appears on the right or left of the screen.
 - "Working Mode" is separated into two settinga--Interval Mode and Masquerading
 - Apative rtf height function is widely used among different windows.
### Changed
 - New features are added to make Working Mode less conspicuous to outsiders.
 - frmMain's adpation logic is significantly improved. Resizing main window is now much faster.
### Fixed

2016.08.19	6.9.16.0819
### Added
 - A new field "FirstPracticeTime" is added to the Database.
 - One more data, namely "average practice time" is calculated as a part of the statistics.
 - A new field "InsertTime" is added to indicate when a KUnit is inserted.
 - Statistics of duration between insert and first practice is added. 
 - Statictis of "learned" KUnit is not included in both MainUI and Statistics window.
 - The way of handling hotkeys is simplied greatly
 - Allow users to add an unlimited number of context search menu item
 - [JLT.Maintenance] The oldest and the latest database backups will not be deleted during maintenance tasks.
 - [JLT.Maintenance] The log of maintenance task is output to a log file.
 - [DBUtility] Add the function of delay search--now the search will perform automatically after the user stops typing for a certain amount of time. This function is much better than performing a search immediately after the keyword is changed.
### Changed
 - "Joint Learner" is changed to "Joint Learning Tool", which makes more sense in English language;
 - "ExerciseTime" is changed to "ExerciseTimes"
 - According to Curtis's recommendations, "ExerciseTimes" is changed to "TimesPracticed", "HistoricalScore" is changed to "PreviousScore" and "LastExerciseTime" is changed to "LastPracticeTime"
 - The word "Learn" is changed to "Practice"
 - The UI of DBUtility is changed greatly, allowing users to see more search results without resizing the window.
 - Since I bought a new laptop which apply 150% font size by defualt, this program has to be changed to adapt to that as well.
 - The layout is changed a lot in order to fit DPI scale from 100% to 150%.
 - A new event "ResizeEnd" is used and thus the resize procedure becomes far less time-consuming.
 - Setting window is much responsive now.
 - [DBUtility] Separate the UI logic and the Database manipulation logic
 - [DBUtility] The search function is improved by making the UI more clear.
 - [DBUtility] Some English descriptions and namings are changed.
 - The layout is further changed to adapt to different DPI settings.
 - The mechanism of Context Menu Search is changed greatly. Currently, its configurations are saved in Database.sqlite instead of the configuration file. This allows users to have the same Context Menu Search options in different computers.
 - The UI for setting Context Menu Search options is changed greatly as well. Now users can change the settings by modifying a configuration file.
 - Integrated the two context menu stripe into one.
 - Unified the methods relating to mp3 download and mp3 playing.
### Fixed

2016.03.26 6.8.16.0326
### Added
 - The context menu search can not be customized and the width of the webbrowser is now larger.
 - Now the statistics modules in both the main UI and the last statistics window are adaptive to the content as well as different DPI settings.
 - Two custom context menu search has now extend to four, with the hot key of Ctrl+F11 and Ctrl+F12
 - Add context menu to QuestionField and AnswerField of the DB Utility.
 - Now users can choose to open in-app context menu search by either the in-app browser (which is in fact an embedded IE) or the system's default browser.
 - The number of context menu search item was increased from 4 to 6, accommodating more item.
 - The context menu is now covering not only questionfield and answerfield, but also blankfield.
### Changed
 - The interaction between and the KUManager is refined. Now the GUI layer can only change the Data of KUmanager by given methods, no direct interference is allowed.
 - The code of both KUManager and the frmLearning are rectified, not the programme is more concise and clear.
 - Simplied the mp3. player
 - Now the learning process is totally being charged by the UI, the KUManager only manage the data things.
 - The weight field of the Knowledge unit is now eliminated. Logically it can cause timeout problem even if users are using the software in a normal manner.
 - The KUnit random selection preocess is simplified and now the random selection process of the programme can select the KUnit from different Maintype based on the proportion of the number of KUnit of Maintype in the given learning process. It means that if a Maintype has a small sum of KUnit in total number but have a relatively larger ratio in one specific learning process, the random selection would not bias to the Maintype of the larger totall sum, but instead, it would tend to select the Maintype of with the larger residual KUnit number in one given learning process.
 - Rename the directories "speech" and "Backup" to "speeches" and "Backups".
 - The RtfQuestionbox is now adaptive in a more native and concise way.
 ### Fixed
 - The High DPI issue is now solved
 - After gaining better understanding of the hotkey processing mechanism, the relevant module has been updated
 - Now the JLT would not read the Shelved KUNits and then abandon them. Instead, it just ignore them when reading
2016.02.21 6.7.16.0221
### Added
 - After (1) Listview.BeginUpdate() and Listview.EndUpdate() are introduced; (2) The method of judging if a string is a number is updated, the response speed of the GUI of JLT has improved significantly!
 - New copy and paste method are added to the DBUtility.
 - Getting rid of the DBHelper! On the face of it, it can simplify the development progress. However, in fact, it is the root cause of the many exceptions thrown by SQLite library! (its complicated factory mode causes that!) The guidance from: http://blog.tigrangasparian.com/2012/02/09/getting-started-with-sqlite-in-c-part-one/.
 - The SQLite manger is not more stable 
 - A sleep(1500) is added to the OK button of the Statistics window, avoiding the dilemma of clicking OK too quickly, making users not able to see the statistics data before it closed.
### Changed
 - [JLT.Maintenance] To make it compatible with the changes to the Main program, many new functions and changes are introduced.
 - [JLT.Maintenance] Adapted it to the new SQL process module, using native SQLite helper instead of the SQL DBHelper downloaded from somewhere else.
 - [JLT.Maintenance] Ignore shelved units.
 - [JLT.Maintenance] Format the DataTable: Use column name, instead of index, to identify columns.
 - Adjust the color of the maintitle to black and adjust the font size of the rtfSearch control, making it the same as the rtfQuestion and rtfAnswer.
 - Make the rtfSearch, rtfQuestion and rtfAnswer to paste only plain text.
 - The function Remove All Punctation is replaced by the function Replace All Non-Alphanumeric Characters with '%'. This is used to solve the problem that while inputting a keyword like "non-existence", after removing the punctation, this method would fail to match even the identical keyword.
 - The possibility of selecting due KUnit is lowered a little bit, to make the whole learning process more even (instead of the first half of the process being filled with due KUnits while the second half of the process full with new KUnits).
 - The SQL issues are now handled by a separated class implemented directly in the JLT.Util project. It is more stable than the before implementation of DBHelper and can now compatible with both x86 and x64 machines without any modification.
 - Some logic of database related clauses are optimized.
 - The structure of the JLT.Util changed a lot, making it more OOP. Significant differences include: the KUManager is not set to a static class; the Statmanager is emerged with the KUManager; the KUData (Renamed as D) class is merged into the KUManager as a private class and the variables declared directly in the KUManager were emerged in KUData;
 - The StateManager is developed into a better way, more OO, more flexible and more understandable.
 - In the past, KUManager used an integer index and the KUList[] to identify the currently learning KUnit, which is considered to be unstable and not OO, now the KUManager uses an independent variable CKUnit to operate the currently learning KUnit. This varible can only be changed by the method SetCurrentLearningKUint(), which is more OO.
### Fixed
 - While checking the checkbox "Replace Punctuation with %", all the Chinese characters and other character other than number and letter will be replaced!
 - The KU.DueNum mechanism does not work properly before (although it will not cause observable problem) and now it is fixed. In the current configuration, the due num is not accurate. Instead, it just update on a random basis (the possibility is 1/11). Since it is used to provide a gound for the frequent appearance of high priority units, the accuracy is not important.
 - The past practice always return the List<T> as a reference, exposing the internal data totally to the alternation out side the class, which is a very bad practice. Now it is corrected, all the return value will be a copy, with no reference to the internal data.
 - The format of comment of methods and variables is clearer.

2016.01.31 6.6.16.0131
### Added
 - A new format of ChangeLog is implemented. Now added, changed and fixed items are separated. The format comes from here: http://keepachangelog.com/
 - A message window will pop out to ask whether user would like to add a new KnowledgeUnit without searching (Since it increases the probability of duplication, it is not recommended to add new KUnit without searching)
 - Based on suggestion from Monkey Zhao, A new filter function is introduced. The new filter function does not only allow users to filter KUnits to explore them in the table as usual, but also allows users to select number to practice based on the filter result. 
 - Many new and detailed comments are added to make codes more readable.
 - The ucLearningNumEditor can now autosize to fit the length of Maintype.
 - Some new knowledge about layout (e.g. padding) mastered these days was implemented to make the intereface better.
 - A new mechanism, which allows users to identify the TTS option of each Maintype, was now implemented. The older practice, which directly wrote the Maintype name in codes, was now abandoned.
 - A new "Add a New Kunit" function was added to the DBUtility and some changes (including the introduction of the new comprehensive method "SwitchToSubmitMode") made the DBUtility works more logically.
### Changed
 - The new reverse chronological order of ChangeLog, instead of chronological order, was now implemented.
 - The last Chinese UI factors were translated into English.
 - The abandoned TTS settings were deleted from UI.
 - Changed the look and feel of confirmation pop box while the user is going to update an existed unit.
 - The default SpeechSynthesizer now speaks asynchronously instead of synchronously, avoiding the problem that while speaking, the UI becomes unresponsive.
 - The default search engines are now Google and Bing, instead of Google and Baidu because Baidu is rather useless in searching English contents.
 - The mechanism of the generation of the deadline of KUnits is changed. It is now based on the function f(x) = 1/10 * abs(x-40) * (x-40) (x is a KUnit's Historical Score). Now the mechanism is more concise and predictable. Apart from that, it can be more compatible with the Qualified Threshold mechanism since now the generation of the deadline is only determined by the Historical Score, which means that the higher the Qualified Threshold is, the higher the Historical Score can be, and thus a longer countdown period can be generated.
 - GUI controls supported by ComponentFactory.Krypton, whose development was stopped several years ago, is now being abandoned. Native windows look and feel is introduced again.
 - Since the whole program is now in English, no Chinese alias is needed. As a result, all the code about alias is now deleted.
 - Disabled the function to allow users to directly set the deadline via interface becasue seems it causes a serious problem when Monkey Zhao uses it. (I guess she always mistakenly clicks the textbox, making the program think that an user's instruction was given and thus overriding the build-in deadline generation mechanism)
 - The relied SQLite dll file is not updated and distinguish between x32 and x64, seemingly more appropriate.
 - The layout of GUI is altered, making it more concise and being able fit small screens.
 - The QulifiedThreshold is changed to PassingScore and ProbabilityControIndex is changed to New Unit Index, which are more natural and common in English.
 - The settings of New Unit Index and Auto speak are now moved to the setting window instead of learning, because they are not frequently used.
### Fixed
 - While inserting a new KUnit, the "Countdown" field can be set as well.
 - While inserting a new KUnit without searching, no expcetion would be thrown now.
 - Some English grammatical mistakes.
 - Fixed some display incompatibility in High-resolution screen.
 - Some translation mistakes are corrected.
 - If no KUnit was practiced yet, an exception of failing to convert DBNull to Datetime would be thrown due to the negligence that the result from SQL query MAX(LastPracticeTime) can be DBNull.  
 - After removing the value of anchor, all controls in FlowLayoutPanel aligned automatically!
 - In rtfSearch and rtfQuestion richtextboxes, if user pastes Chinese into them then the Chinese characters would become questionmarks.

2015.10.15 6.5.15.1015
1、对覆盖统计做调整，包括：将统计项对齐、新增“半年覆盖率”一节（好吧主要目的就是让我看起来爽一些）
2、修正一个由于自动发音和点击按钮发音对待发音字符串处理不同导致对同一字符串下载到两份不一样的语音文件的Bug；
3、逐步对界面元素实行英文化；
4、对于GenerateNextKUI方法中的PriorityCount机制进行调整，原先的方法是达到了设计目的的，但是太过繁琐，对该方法进行大幅简化
5. Begin to use English to make source code comment and change log;
6. Translate UI of JLT DB Tool into English
7. Fixed a long-existed bug that while deleting a KU (DUnit), the procedure of rolling back of learning status mistakenly shelves the KU (AUnit) after the DUnit. Therefore if the DUnit and the AUnit are not in the same Maintype, the PracticedUnitCount of the Maintype of the AUnit would be reduced to -1 allowing 1 unit of unscheduled maintype appears in the future learning.    
8. Divided the method UpdateLearningStatus into two, making the save of the last unit and the initialization of the next unit separated and clear.
9. Improved the mechanism of shelving unit, making the procedure more logical and clear instead of merely working.
10. Removed several fault-tolerant codes. Maybe it can make the data safer.
11. Fixed several grammatical errors in codes, comments and databse.
12. If a mp3 file for a word or expression does not exist, instead of downloading it immediately, now the programme would use the TTS mechanism of C# instead. The download function is separated to the project "JLT.Maintenance".
13. Added a long-awaited function to allow the DBUtility to perform searches, depending on users' setting, on either the answer field or the question field. (Since the search on answer field is much better in finding whether there is a duplicate item)
14. In the conext menu of AnswerField, a new function of in-app searching was added.
15. Add several trivial but useful functions to DBUtility.

2015.01.04 6.3.15.0104
1、修正了待播放字符串包含不能用于文件名的字符导致下载音频失败的问题
2、为数据库工具加入备选单元列表的功能，避免总是只能看到搜索出的第一个结果
3、拉长单元的学习周期，让未达到及格阀值的单词延缓出现
4、增加了选择TTS下载源的功能，兼顾墙内墙外
5、超长发音文件压缩文件名，以兼容Linux备份服务器
6、将bing搜索替换为google搜索
7、在联合学习数据库工具中加入于标题位置显示当前缓存的MainType的功能
8、对在高分屏电脑上的表现进行优化

2014.08.19	6.2.14.0819
1、虽然说互联网像自来水般普遍......但......互联网感觉还是一根小水管，而且特别贵......感觉目前将数据库放到服务器上的优点不多，却带来了卡顿的重大缺点，于是还是用回了原先的SQLite
2、读取MainType列表的时候，从原先的只要存在知识单元就读入修改为必须存在未被搁置的知识单元才读入
3、加入搜索关键字的功能
4、取消引用原先自行实现的mXMLManager类，改为使用系统自带的配置文件读写机制保存配置文件
5、移除专为司考设计的学习情况统计程序
6、对学习界面布局进行微调
7、加入并优化搜索单词图片的功能
8、在程序底层写死数据库名，界面层只允许定义数据库路径
9、对程序架构进行较大幅度修改，以MainType为对象修改程序，整个程序更加体现面向对象的特点
10、删除专门为司考题设计的，别的环境没什么用的通过主界面设置SubType的功能
11、加入纯动态的MainType设置机制，过往写死EngToChn、ChnToEng、Law、IELTSWriting的做法被彻底抛弃
12、修正当某种MainType值下的单元很少（例如一个）的时候，历史最高分和当前分数倒挂导致选取不到知识单元的问题

2014.07.28	6.1.14.0728
1、删去了基本没有任何作用的在主界面修改知识单元内容的功能，并调整了主界面布局
2、增加了低分已及格单元出现的可能性，方法是：将原先的随机区间及格阀值到100修正为由及格阀值到本MainType下所有知识单元中分数最高的那个，这样的话，相当于增加了历史分数在随机中的作用（因为是事实上，平时学习时我很少给到90分，更别说100分，这样一来，实际上至少90-100这一段是经常被浪费的）。
3、将原先数据库刷新工具的延时刷新修改为按下回车后刷新
4、为联合学习工具的学习界面的隐藏部分增加格式化快捷键粘贴内容的功能
5、新增一个统计学习情况的程序
6、为数据库插入工具增加一个“忽略标点符号进行搜索”的功能

2014.04.28	6.1.14.0428
1、数据库插入工具实现更新到期时间的功能
2、为数据库插入工具加入延迟刷新功能（就是不像原来那样rtfQuestion的内容一有变化马上从数据库刷新，而是等待两秒再刷新）
3、为数据库插入工具加入状态栏
4、为主程序添加直接从主界面修改SubType的功能
5、优化了数据库插入工具的匹配功能，一个是将=改为LIKE，另一个是将不标准的换行符统统替换为unicode的标准版本
6、对数据库插入工具进行优化，区分查找功能和可见部分，使得程序结构更为清晰
7、修正了由于数据统计类为静态类，而有的统计方法忘记重新将KUList输入该类，导致当数据库被刷新后统计类中保存的静态KUList未得到及时刷新造成的统计错误
8、基本上完美实现数据库插入工具粘贴纯文本的问题
9、不在默认使载入界面总在最前，避免一些情况下挡着其他程序工作

2014.03.16	6.1.14.0316
1、取消了一直以来让我感觉不甚和谐的PriorityCountDown，改用Deadline提供类似的优先功能
2、修改PCI为URI（Unit Random Index），更能反映对新旧单元进行随机的本质
3、优化了欢迎界面逻辑，更加可以反映程序内部的工作情况
4、如果一个隐藏部分有多个意思的，多个意思都可以发音
5、实现在程序初始化的时候捕获错误（主要就是数据读读入错误）的功能

2014.02.27	6.0.14.0227
1、进行了有史以来最重要的修改之一，将本程序修改为一个非完全的单机程序——斟酌再三，在网络就像自来水般存在的今天，已经允许把程序的数据库放到网上了
2、个人技术储备也已经完全具备了这一点的需要
3、出于兼容web版本的需要，将大量的静态变量修改为动态的，同时也算是一种优化
4、对Util工程进行大量优化操作，更加和谐
5、对另一个不太和谐的——历史分数消退机制进行了更改，直接利用数据库的LastPracticeTime达成目的，不再保存一个xml变量
6、修正了可能已经存在了较长时间的PCI实际上被架空的Bug
7、修正了搁置单元的方法没有考虑知识单元权重的Bug
8、对流逝时间的表示更加和谐，不像以前那样不和谐
9、增加对新增学习量（而不是比率）的统计，方便每次得知本次实际上学了多少内容；
10、允许在学习过程中查看学习数据统计

2014.02.15	5.5.14.0216
1、大幅修改GUI.Main工程，贯彻以数据库为核心的原则，整个程序的灵活性大幅增加，不再将任何MainType写死进程序，可以适应无限多种MainType组合
2、经过认真思考，决定取消DBUpdater工程，取消Excel文件更新的模式，改为设计特殊的数据库写入类并允许直接在学习界面进行修改（反人类程度大为降低啊！）
3、删除已经无用的DBUpdater、UpdateManager等等无用的工程、代码文件
4、完成DBInster的构建
5、将所有有可能输入中文的文本输入框的ImeMode都设置为On，方便输入
6、新增了直接从主界面删除当前知识单元的功能
7、更换了发音引擎（还是谷歌的），似乎很好用的样子
8、为DBinserter加入Question重复的即时提醒功能
9、看了网上介绍三层架构的文章，按照他的推荐方式对类名、模块名及其架构进行一定的优化
10、根据实际使用经验，对DBinserter进行一定的优化
11、用一种不太和谐的方法，实现了主界面Listview的列宽自适应
12、允许可见部分和隐藏部分rtf编辑框接受tab
13、中译英的情形下，可对答案部分的第一个单词发音
14、考虑到以后可能有较多的不定项模块和问答题模块，新增Weight字段，允许一个知识单元占据多个学习量单位
15、优化了发音流程，解决了原先如果没有勾选自动发音，则点击发音按钮只能尝试播放原有的本地声音，而不会从网上下载的bug

2014.02.14	5.3.14.0214
1、由于大幅修改了DBHelper方法，程序对该方法进行适配，并根据本程序的需要改进了DBHelper方法

2014.02.03	5.2.14.0203
1、利用谷歌词典，新增单词发音功能

2013.09.20	5.1.13.0920
1、由于放弃了一次编译处处运行的计划，故将DevartSQLite改回官方的SQLite库
2、升级.NET框架版本到4.5，同时生成64位程序
3、采用新的更新架构，先将所有数据读入内存然后使用DataTable的Select方法进行筛选，效率更高
4、减少单次学习结束后统一扣分量，避免偏重一方面学习的时候另一方面的分都快扣完了。
5、在较长时间之后再次生成项目，并改回4.0，避免技术太先进以后难以兼容winxp和win7。
6、删掉无用的英语作文背诵部分
7、忙里偷闲，加了一个启动欢迎页
8、如果数据库中的IsShelveUnit为True，则该条目不读入数据库。这么做的好处是可以统计不包括被搁置条目后的学习进度
9、同时，IsShelveUnit为True的项目不进行CountDown和历史分数衰减。（尼玛SQLite这个不认truefalse的特性差点坑屎我！）

2013.08.18	5.1.13.0818
1、对DataAccesser和DataProcesser的功能进行再次划分，将DataAccesser之一部划分入DataProcesser中，似乎更加和谐
2、终于比较清楚地确定了后台优先倒计时和用户自定义优先倒计时之间的关系
3、终于实现了分数计算的单轨制
4、平均分计算只取前八次，而不是原先的10次
5、经过慎重考虑，决定将AverageScore统一修改成HistoricalScore，以反映其实际内涵
6、终于用事件驱动的方式解决了一直以来困扰着我的学习进度推进问题，今天豁然开朗！
7、根据对程序架构的调整，大幅修改了界面层内容，将本不应该属于界面层的内容移入数据处理层
8、调整PriorityCountDown的计算方法，将原先-1表示不优先修改为null，更能反映实际情况
9、使用下拉菜单的形式设置优先倒数的值，更加科学和谐简便
10、对学习界面进行微调，似乎更加和谐科学
11、取消了为了鞭策学习而设计的暂停计时功能
12、由于这两天开发完成了Android版本的联合学习工具，故加入一个ClientType字段记录是哪种程序最后读取了特定知识单元
13、对界面布局做了少量修改
14、因应时势变化，取消数据库更新工具的数据库复制功能
15、又修正溢出输入错误导致程序出错的Bug
16、参考六级成绩，发现作文实为拖后腿之最严重部分，故独立Writing一类，专门阅读、练习写作
17、将Subject字段改名为SubType
18、斟酌再三，还是采用的列举的方式处理优先倒数循环的问题
19、修正了如果不存在上次学习时间则总是无法更新上次学习时间的Bug

2013.07.04	5.0.13.0704
1、缩短许多命名，免得显得又臭又长
2、尝试将DataManager明确拆分为业务逻辑层和数据访问层
3、将三张知识单元表合为一张，增加逻辑上的和谐程度
4、使用强类型DataSet储存数据，更加高效便捷
5、修改知识单元随机规则和优先级计算规则，更加和谐高效
6、强类型DataSet似乎超过了技术能力，还是改回了原先的读入DataSet之后自行整理一次的方法
7、大量修改界面层逻辑，将大量业务功能移至底层实现
8、删除大量刷成就感的积累性参数，大量引入动态参数，鞭策学习
9、由于大量减少无必要的统计内容
10、启用全新的学习完毕统计界面
11、终于找到一批让我比较满意的图标！
12、重新定义分数的概念，将其理解为【记忆指数】，用于反映对某一特定单元的记忆情况，故计分是采取最多十次平均的方式，以反映近期的记忆情况。
13、将平均分计算移至界面层完成（尽管似乎不怎么和谐）
14、斟酌再三，平均分计算还是采用了双轨制。。。
15、由于架构变动较大，因此还修复了大量小Bug
16、修正了搁置单元时导致的CurrUnit被重置而产生的问题
17、修正刷新数据库时实际上并不是重置而是新增数据库数据的问题
18、优化了优先抽取过多的问题，实现优先抽取与实际须优先抽取数的关联
19、彻底解决只文本框允许输入数字的问题，妈妈再也不用担心出现字母啦！
20、解决了刷新数据库导致的已学习知识单元数量丢失的问题

2013.06.10	4.1.13.0610
1、根据过往失败的经验，在不剧烈的情况下全面调整系统架构
2、全新引入记忆消退机制，每过一天每一学习过的学习单元的成绩会下降0.75分

2013.05.11	4.0.13.0511
1、联合学习工具将迎来自开发以来最大幅度的更新，将在非界面层次上实现跨平台运行
2、将最重要的DataProcesser模块独立为新的DBManager类，将界面层与实现层彻底分离
3、将数据库从比较不和谐的Access迁移到比较主流的SQLite
4、对数据库读写部分进行大规模更新，引入数据库事务提高效率和稳定性
5、彻底摒弃不带参数的SQL语句，提高程序稳定性和对复杂格式文本的适应性
6、大量解决引入新的数据库之后的小问题
7、使用全新的支持跨平台的SQLite封装类与Excel读取类，更加和谐科学，同时效率大幅提高
8、大量更新项目名，更加科学
9、猛然发现Mono运行时支持直接运行VC#编译的程序，果断实现了一个简化版的更新器并对linux平台做了一定的兼容性变动
10、找到了使DateTime型可空的方法，优化了对应的代码
11、根据记忆规律，引入短期覆盖率，同时抛弃意义不大的完成指数
12、猛然想起百花李冉做英语选择的情形，果断极大增加学习量
13、允许使用表达式在配置文件中定义基本学习量和各个分学习量的关系

2013.05.04	3.0.13.0504
1、重新整理程序，优化程序框架：主要内容为优化了主界面、优先倒计时、搁置单元等比较棘手的模块
2、重新调整主界面布局，似乎更加好看了
3、删除了许多实际上已经没用的僵尸代码
4、再三衡量，还是删除了一些Krypton控件序列中设计得不那么好的一些控件并用系统控件替代
5、细化优先倒计时，似乎变得更加科学
6、不断细微调整倒计时功能

2013.04.28	2.8.13.0428
1、引入新皮肤！好看了很多！

2013.02.02	2.7.0202
1、新学期新气象，启用新图标
2、更新部分引用类，更加稳定
3、由于学习指导思想发生变更，删除单词优先级变更工具
4、将名称JointLearning改为JointLearner，似乎更加和谐科学
5、为数据库更新工具引入新皮肤
6、对数据库更新工具进行架构上的一些调整，更加“安全、科学”
7、使用封装了的AccessDBManager改进程序

2013.01.05 2.6.0105
1、单词优先级变更工具若发现当前及格阀值比设定值高的就显示为红色且不更新及格阀值
2、为单词优先级变更工具的剪贴板加入trycatch结构
3、若新平均分比原平均分低显示为绿色，否则显示为红色
4、为学习界面加入淡色背景，可能有利于保护视力
5、修正了调整系统时间显示格式可能导致的数据库写入出错的Bug
6、为随机选择学习知识单元设置5秒的超时，避免由于没有可用的单元导致程序卡死

2012.12.29	2.5.1229
1、修改数据抽象层结构，将数据统计功能分拆为新的类
2、新增部分数据抽象层的错误抛出与提示
3、大幅修改主界面样式，更加和谐 
4、允许在主界面中定义本次学习搁置特定科目，更加适应期末考试
5、在搁置科目中显示科目覆盖率和科目知识单元数
6、进一步修改学习界面，将信息显示移动到底部状态条，支持溢出调整
7、将平均分、学习次数等参数分成不同的label，更加适应溢出调整
8、将学习界面中的知识单元和知识单元表等数据封装成新的静态类，更加和谐
9、更新耗时的计算方法
10、调高了单词学习中重复出现的知识单元的打分下降率，从出现一次少2.7分调整为3.9分
11、加入进度条
12、删除了deletesign字段，该字段事实上已经废弃很久了
13、调整了PriorityCountDown的逻辑
14、扩大了搁置科目设置窗口的宽度
15、修正了禁止相同单元连续出现两次逻辑无效的bug
16、允许在搁置科目的表格中排序
17、引用全新mXML文件操作类，健壮性大幅提升
18、修正了进度条的数值超出100导致的错误问题
19、修正了一个会将超过及格阀值的知识单元的PriorityCountDown全部设置为4的惊天大bug
20、新增期末模式下的“只学法学”功能
21、由于旧单元出现指数的加入，视未覆盖单元为优先单元的意义已经很小而且他有较大的副作用，因此将其删去
22、将设置为一般单元从右键菜单移到“高级”菜单
23、在设置科目搁置内加入了关闭按钮
24、在学习界面直接加入调整字体的按钮，避免使用右键，支持回答部分字体的调整
25、增大答案显示部分，因为标准答案总是会比输入的多的。。

2012.12.13	2.4.1213
1、在数据库中记录最后一次学习的时间
2、扩展数据查看工具的作用
3、数据库更新工具在更新主循环中加入处理时间，避免严重假死
4、允许定义随机若干次后优先
5、当焦点移到设置及格阀值、问题、优先级倒计时、旧单元出现指数的编辑框时全选内容
6、修正了学习量的计算逻辑，避免在主界面和学习界面两次计算学习量
7、每一个数据抽象类使用一个随机数发生器，避免每次抽取单元时都重置随机种子反而导致的不随机
8、加入计分预览功能，方便在下一个之前决定是否要调整及格阀值或者设定优先级
9、优化层级结构，将计算平均分等内容从界面层修改至数据抽象层，更符合层次逻辑
10、删去学习界面的延迟查看功能
11、修改高优先级随机逻辑，设定为低于及格阀值11-20，下次优先；低于5-10，下两次优先，低于1-4，下三次优先；
12、规定不允许出现连续出现两个一样的知识单元，避免降低学习效果
13、允许在主界面设置知识单元为一般单元
14、修改规则新平均分低于原平均分7分设置为Priority为只要平均分下降则设置为Priority

2012.12.01	2.3.1201
1、修正了一个cboMark为空导致的错误
2、修正命名方法，有条件放弃匈牙利命名法
3、允许选择在本次学习中永久搁置某一知识单元或者仅搁置一次
4、修正了刷新数据库后特定单元被删除同时尝试在主界面将其更新到数据库导致的越界问题
5、对学习界面做出较大调整，使知识单元的格式不会总是扭曲
6、重新划分架构，将统计数据的部分移到界面层完成
7、允许在学习界面控制已覆盖的知识单元的出现概率
8、加入期末模式，允许通过数据库设置暂时屏蔽不需要考试的内容
9、对新界面的布局和设置进行微调
10、屏蔽期末模式与关闭按钮
11、更新工具支持一次从多个路径进行更新
12、搁置单元支持取消
13、修正永久搁置单元对高优先级随机无效的问题
14、修正ctrl+enter快捷键的换行屏蔽失效的问题
15、刷新数据库时屏蔽刷新数据库按钮
16、单词优先级变更工具允许在程序中指定及格阀值
17、对单词优先级变更工具的视觉效果做出少量调整，并修正一个string到int16的bug
18、单词优先级变更工具允许在执行优先级变更的时候定义其是否为普通单元
19、更换大图标图标，更加美观
20、学习界面在从英语过渡到法的时候会根据窗口位置向左上方移动100个单位，避免过多的部分超出屏幕右下角

2012.11.18	2.2.1118
1、大幅改进统计数据输出的方法
2、支持通过配置文件定义每个Excel表格内容的及格阀值（否则默认61）
3、在校验工具中显示及格阀值
4、彻底解决F10及Ctrl+Enter快捷键出错的问题（但是F8的问题依然未能解决）
5、允许增加或减小知识单元的字体
6、支持通过Listview排序
7、开始学习修改为只有选择特定学习量才能开始而不是未选择的默认最大学习量
8、修改备份数据库的随机逻辑，改为1/5概率同步数据库
9、由于新的知识单元似乎存在一些问题，加入允许暂时搁置（就是跳过）某个知识单元的功能
10、支持直接在主界面查看学习量信息
11、新增一个优先级逻辑：针对已经学习过的内容如果平均分下降的则加入AskNextTime队列，如果下降超过7分的则加入Priority队列
12、在一般性抽取时，只针对超过及格阀值的部分进行随机，以增加低分段被抽取到的概率
13、在数据更新到数据库的时候增加知识单元数据异常的检测与错误抛出
14、修正主界面逻辑的一个小错误
15、恢复主界面的控制按钮
16、主界面不总在最上
17、调整随机机制，控制已学习过的单元的出现概率（减小60%）
18、允许从主界面选择视未学习过的知识单元为优先的知识单元
19、微调随机产生知识单元的机制
20、修改时间利用率计算机制，由统计流逝时间改为统计停止时间，避免由于知识单元间的暂停导致的计算不准确
21、修正搁置单元时由于主界面的可用性控制造成的实例使用未经初始化

2012.11.13	2.1.1113
1、对微软产品有了新的认识。。。
2、应该解决了一个傻逼微软导致的将Excel表格内容截取前255个字的问题
3、修正备份频率，每三天备份一次
4、微调主界面，改用spiltcontainer布局学习界面
5、允许在开始下一个单元开始前先短时间查看本单元学习的结果
6、完成刷新数据库模块
7、允许在学习过程中隐藏问题的答案（方便背诵）
8、修正了显示隐藏问题的文字说明和单元切换时出现的显示问题
9、将合格阀值修改为66并更新到整个数据库
10、根据本次学习过程的练习次数降低每次打分对结果的影响
11、取消验证码机制
12、修正读入知识单元表时存在的表示单元表序号方法不一致导致的读入出错问题
13、再次大幅提高封装性，彻底实现界面逻辑和数据库操作逻辑的分离，更加OO

2012.11.07	2.0.1107
1、以面向对象的设计方法重构程序
2、使用F系列按键选择分数，这样就在查看答案之后还可以修改自己的回答
3、修改退出机制
4、修改保存double形式的完成度，否则由于每次变动小都被忽略掉
5、修正了一个优先级机制的Bug
6、大幅减少公共组件，提高OO性
7、使用DataManager重写主界面的内容
8、升级数据库读取逻辑，整个程序仅读入、保留一份数据库内容在内存
9、再次大力重构主界面布局
10、使用委托方法通知主窗口可以关闭的事件
11、加入多个trycatch块，避免异常退出
12、可能解决了一个傻逼微软导致的将Excel表格内容截取前255个字的问题

2012.11.03	1.10.1103
1、修正了统计数据库字数的惊天大bug！（不过在数值上原先的错误居然是精确值的一个极好的近似...）
2、把优先程度改为72，原来80很难达到。。。

2012.10.15	1.9.1015
1、支持在学习界面设置当前问题是否一定在下一次学习中出现
2、引入mXML操作类通过文件和数据库的映射配置直接决定excel文件将被更新到哪一个数据库，避免更新到错误的数据库的问题
3、修改主界面样式，显示更多信息
4、在学习界面增加“有必要在下一轮学习中出现本知识单元”的勾选框
5、全新修改主界面，支持显示更多统计数据
6、修正可以同时打开多个学习窗口的问题
7、全面修正excel文件读入方式，改用数据连接的形式读入，更加符合新标准，效率更高！
8、基于上一点，实现增量更新，而不是每一次都覆盖每一条存在的内容
9、更新了数据库更新工具，使用delete标识删除对象
10、应用全新excel读入工具，可以精确统计更新项
11、新增统计学习效率

2012.10.09	1.8.1009
1、在更新数据库时，默认抛弃头尾的空白字符
2、修正数据库更新工具由于在判断有效性时过滤掉了DeleteSign为True的项导致无法删除待删除项目的问题
3、加入限制窗口的最小大小，免得窗口被拖得非常挫
4、根据昨晚的考虑，新增单词优先级变更工具，从此统一有道单词本和本程序的背诵功能
5、更新使用Access2007版本的数据库
6、单词优先级变更工具支持同时显示单词的意思
7、单词优先级变更工具一旦发现本单词不存在于数据库的就将之复制到剪贴板
8、单词优先级变更工具显示单词所属类别
9、基于英语单词量比较大的特点，适当调高了每次背诵的单词数量
10、经过比较深入的思考，大幅提高英语方面的知识单元的学习数量
11、若答案输入框内容发生变动，则自动继续计算学习时间，避免时间暂停计算后很久都没有想起来要继续计算
12、兼容alt+enter换行

2012.09.24	1.7.0924
1、新增统计数据库Question与Answer的总字数
2、数据库更新工具支持多表格更新
3、由于Expression学习进度很快，把他的比例改低，把Word的比例改高
4、整体提高学习量
5、修正了数据库更新工具如果没选择数据表就开始更新导致的出错问题
6、修正了数据库更新工具会读入不存在于数据库中的DeleteSign为True的条目然后在下一次更新时才将其删除的问题
7、为了适应快盘同步的要求，把本程序生成于C盘下，每次更新数据库时复制到快盘根目录
8、大量重写数据库更新工具更新功能的代码，更加整洁
9、数据库更新工具加入更新信息显示功能

2012.09.13 1.6.0913
1、新增数据库更新工具，直接从excel读取数据更新到access数据库
2、修正答案输入框不能输入回车的问题
3、修正每天限制启动次数中Count没有根据日期被重置的问题
4、调整了三种学习项目之间的比例
5、加入使用快捷键检查答案及翻页的功能
6、加大学习力度，取消次数条件退出
7、修正了可以从任务栏绕开验证码关闭的bug
8、在学习界面显示部分统计数据
9、修改了单词、表达和法三者的学习量的分配关系
10、重新显示控制按钮
11、修正由于修改了数据读入方式导致的优先学习不及格内容的机制失效的问题
12、整个学习过程可以通过键盘完成
13、解决标准答案输出格式丢失的问题
14、数据库更新完成时反馈删除条目的情况
15、实现学习进度计时
16、学习进度计时暂停时学习窗口取消总在最前
17、输入验证码的输入框默认关闭输入法
18、修改对知识单元在一个学习进度中的出现规则，改为40分以下的可以出现5次。
19、数据库更新工具允许多选文件

2012.09.11	1.5.0911
1、取消法学类的背诵项目，同时大幅更新代码
2、扩展英语项目，加入作文短语背诵
3、增加对象的封装性，学习界面不再大幅依赖于主界面
4、修改数据库名称，全部学习表统一命名
5、更新主界面学习量的表示方式，把所有学习量统一成一个指标按照比例折算
6、重新统一主界面程序中的三个表，修正部分统计中的逻辑错误
7、更新名称为联合学习辅助工具
8、修改了单个知识单元在一个学习进度中的可能出现的次数

2012.08.10	1.0.0810
1、完成基于Access数据库的联合背诵工具
2、以法学知识和英语单词为背诵内容
3、测试阶段仅开放英语背诵功能
4、加入不同背诵单元按照其平均分数确定随机概率的做法
5、加入不同大小的背诵窗口
6、对于特别不应当出错的情况，允许负分出现，最多负30
7、每天本程序成功运行四次后将自动退出
